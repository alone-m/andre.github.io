(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{364:function(o,t,e){"use strict";e.r(t);var _=e(42),v=Object(_.a)({},(function(){var o=this,t=o.$createElement,e=o._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("h1",{attrs:{id:"自学前端遇到的面试题的整理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自学前端遇到的面试题的整理"}},[o._v("#")]),o._v(" 自学前端遇到的面试题的整理")]),o._v(" "),e("ul",[e("li",[o._v("本人前端小白一枚，整理这篇文章也是为了帮助自己学习。废话不多说，直接开始吧~")])]),o._v(" "),e("h2",{attrs:{id:"原型对象和原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型对象和原型链"}},[o._v("#")]),o._v(" 原型对象和原型链")]),o._v(" "),e("ul",[e("li",[e("strong",[o._v("原型链的原理")])])]),o._v(" "),e("blockquote",[e("p",[e("strong",[o._v("什么是原型链")]),o._v("？"),e("br"),o._v("\n想要搞清楚"),e("code",[o._v("原型")]),o._v("链，首先需要搞清楚什么是"),e("code",[o._v("原型对象")]),o._v("。想要搞清楚什么是"),e("code",[o._v("原型对象")]),o._v("，首先要搞清楚什么是"),e("code",[o._v("普通对象")]),o._v("和"),e("code",[o._v("函数对象")]),o._v("。(小学语文体育老师教的，谅解~~)\n"),e("br"),e("br"),o._v(" "),e("strong",[o._v("那么什么是普通对象和函数对象呢？")]),o._v(" "),e("br"),o._v("\n在JavaScript中万物皆对象。对象又分为普通对象和函数对象。函数对象顾名思义就是通过"),e("code",[o._v("new Function()")]),o._v("创建的对象就叫做函数对象。")])]),o._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[o._v("function object(){alert(1)}\nvar object1 = function(){alert(1)};\nvar object2 = new function('demo','alert(1)');\n")])])]),e("blockquote",[e("p",[o._v("object、object1、object2实际上都是通过"),e("code",[o._v("new function()")]),o._v(" 创建的"),e("code",[o._v("函数对象")]),o._v("。除了函数对象，其他的都叫做"),e("code",[o._v("普通对象")]),o._v("。\n"),e("br"),e("br"),o._v(" "),e("strong",[o._v("什么是原型对象")]),e("br"),o._v("\n每一个对象在创建的过程中都会有一些预定义的属性，其中"),e("code",[o._v("_proto_")]),o._v("就是其中一个预定义属性。而每一个函数对象中都会有一个"),e("code",[o._v("prototype")]),o._v("属性(只有函数对象中有"),e("code",[o._v("prototype")]),o._v("属性，普通对象中没有)。当我们通过"),e("code",[o._v("new")]),o._v("关键字去创建一个函数对象的实例的时候。这个函数对象实例的"),e("code",[o._v("_proto_")]),o._v("属性就会指向这个函数对象的"),e("code",[o._v("prototype")]),o._v("属性。而"),e("code",[o._v("object.prototype")]),o._v("就是原型对象。")])]),o._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[o._v("function Person(){\n    Person.prototype.name = 'Jack';\n    Person.prototype.age  = 21;\n    Person.prototype.say = function(){\n        alert('人说话')\n    }\n}\n\n//man为Person函数对象的一个实例所以man对象的_proto_属性就指向Person对象的prototype属性\nvar man = new Person(); \n")])])]),e("blockquote",[e("p",[o._v("所以每一个对象的"),e("code",[o._v("_proto_")]),o._v("属性都会指向其构造器的"),e("code",[o._v("prototype")]),o._v("属性。由于函数对象的构造器就是函数本身,所以函数对象的"),e("code",[o._v("_proto_")]),o._v("属性都是指向"),e("code",[o._v("Function.prototype")]),o._v("属性。每一个对象都会继承它的原型对象的所有方法和属性，而前面说到每一个对象都会有一个"),e("code",[o._v("_proto_")]),o._v("属性。所以每一个对象在调用方法的时候，首先会找他的原型对象（prototype）中的方法和属性，如果没有就找原型对象的"),e("code",[o._v("_proto_")]),o._v("属性，一直向上查询直到Object对象。")])]),o._v(" "),e("hr"),o._v(" "),e("p",[e("strong",[o._v("总结")]),o._v(" "),e("br"),o._v("\n1、原型和原型链是JS实现继承的一种模型。"),e("br"),o._v("\n2、原型链的形成是真正是靠"),e("code",[o._v("__proto__")]),o._v(" 而非"),e("code",[o._v("prototype")])])])}),[],!1,null,null,null);t.default=v.exports}}]);